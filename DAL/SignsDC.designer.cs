#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="real_test")]
	public partial class SignsDCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSignFio(SignFio instance);
    partial void UpdateSignFio(SignFio instance);
    partial void DeleteSignFio(SignFio instance);
    partial void InsertSignerPoup(SignerPoup instance);
    partial void UpdateSignerPoup(SignerPoup instance);
    partial void DeleteSignerPoup(SignerPoup instance);
    partial void InsertSignType(SignType instance);
    partial void UpdateSignType(SignType instance);
    partial void DeleteSignType(SignType instance);
    partial void InsertSign(Sign instance);
    partial void UpdateSign(Sign instance);
    partial void DeleteSign(Sign instance);
    #endregion
		
		public SignsDCDataContext() : 
				base(global::DAL.Properties.Settings.Default.RealConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SignsDCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SignsDCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SignsDCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SignsDCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SignFio> SignFios
		{
			get
			{
				return this.GetTable<SignFio>();
			}
		}
		
		public System.Data.Linq.Table<SignerPoup> SignerPoups
		{
			get
			{
				return this.GetTable<SignerPoup>();
			}
		}
		
		public System.Data.Linq.Table<SignType> SignTypes
		{
			get
			{
				return this.GetTable<SignType>();
			}
		}
		
		public System.Data.Linq.Table<Sign> Signs
		{
			get
			{
				return this.GetTable<Sign>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SignFio")]
	public partial class SignFio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_sign;
		
		private string _fio_sign;
		
		private string _position;
		
		private string _short;
		
		private byte _idSignType;
		
		private EntitySet<SignerPoup> _SignerPoups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_signChanging(int value);
    partial void Onid_signChanged();
    partial void Onfio_signChanging(string value);
    partial void Onfio_signChanged();
    partial void OnpositionChanging(string value);
    partial void OnpositionChanged();
    partial void OnshortChanging(string value);
    partial void OnshortChanged();
    partial void OnidSignTypeChanging(byte value);
    partial void OnidSignTypeChanged();
    #endregion
		
		public SignFio()
		{
			this._SignerPoups = new EntitySet<SignerPoup>(new Action<SignerPoup>(this.attach_SignerPoups), new Action<SignerPoup>(this.detach_SignerPoups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_sign", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_sign
		{
			get
			{
				return this._id_sign;
			}
			set
			{
				if ((this._id_sign != value))
				{
					this.Onid_signChanging(value);
					this.SendPropertyChanging();
					this._id_sign = value;
					this.SendPropertyChanged("id_sign");
					this.Onid_signChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fio_sign", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string fio_sign
		{
			get
			{
				return this._fio_sign;
			}
			set
			{
				if ((this._fio_sign != value))
				{
					this.Onfio_signChanging(value);
					this.SendPropertyChanging();
					this._fio_sign = value;
					this.SendPropertyChanged("fio_sign");
					this.Onfio_signChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="short", Storage="_short", DbType="VarChar(50)")]
		public string @short
		{
			get
			{
				return this._short;
			}
			set
			{
				if ((this._short != value))
				{
					this.OnshortChanging(value);
					this.SendPropertyChanging();
					this._short = value;
					this.SendPropertyChanged("@short");
					this.OnshortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSignType", DbType="TinyInt NOT NULL")]
		public byte idSignType
		{
			get
			{
				return this._idSignType;
			}
			set
			{
				if ((this._idSignType != value))
				{
					this.OnidSignTypeChanging(value);
					this.SendPropertyChanging();
					this._idSignType = value;
					this.SendPropertyChanged("idSignType");
					this.OnidSignTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SignFio_SignerPoup", Storage="_SignerPoups", ThisKey="id_sign", OtherKey="idsign")]
		public EntitySet<SignerPoup> SignerPoups
		{
			get
			{
				return this._SignerPoups;
			}
			set
			{
				this._SignerPoups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SignerPoups(SignerPoup entity)
		{
			this.SendPropertyChanging();
			entity.SignFio = this;
		}
		
		private void detach_SignerPoups(SignerPoup entity)
		{
			this.SendPropertyChanging();
			entity.SignFio = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SignerPoups")]
	public partial class SignerPoup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idsign;
		
		private int _poup;
		
		private EntityRef<SignFio> _SignFio;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidsignChanging(int value);
    partial void OnidsignChanged();
    partial void OnpoupChanging(int value);
    partial void OnpoupChanged();
    #endregion
		
		public SignerPoup()
		{
			this._SignFio = default(EntityRef<SignFio>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idsign", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idsign
		{
			get
			{
				return this._idsign;
			}
			set
			{
				if ((this._idsign != value))
				{
					if (this._SignFio.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidsignChanging(value);
					this.SendPropertyChanging();
					this._idsign = value;
					this.SendPropertyChanged("idsign");
					this.OnidsignChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_poup", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int poup
		{
			get
			{
				return this._poup;
			}
			set
			{
				if ((this._poup != value))
				{
					this.OnpoupChanging(value);
					this.SendPropertyChanging();
					this._poup = value;
					this.SendPropertyChanged("poup");
					this.OnpoupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SignFio_SignerPoup", Storage="_SignFio", ThisKey="idsign", OtherKey="id_sign", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SignFio SignFio
		{
			get
			{
				return this._SignFio.Entity;
			}
			set
			{
				SignFio previousValue = this._SignFio.Entity;
				if (((previousValue != value) 
							|| (this._SignFio.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SignFio.Entity = null;
						previousValue.SignerPoups.Remove(this);
					}
					this._SignFio.Entity = value;
					if ((value != null))
					{
						value.SignerPoups.Add(this);
						this._idsign = value.id_sign;
					}
					else
					{
						this._idsign = default(int);
					}
					this.SendPropertyChanged("SignFio");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SignType")]
	public partial class SignType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _id;
		
		private string _Name;
		
		private string _ShortName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    #endregion
		
		public SignType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(50)")]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Signs")]
	public partial class Sign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _poup;
		
		private int _id_boss;
		
		private int _id_glbuh;
		
		private System.Nullable<int> _UserId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnpoupChanging(int value);
    partial void OnpoupChanged();
    partial void Onid_bossChanging(int value);
    partial void Onid_bossChanged();
    partial void Onid_glbuhChanging(int value);
    partial void Onid_glbuhChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    #endregion
		
		public Sign()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_poup", DbType="Int NOT NULL")]
		public int poup
		{
			get
			{
				return this._poup;
			}
			set
			{
				if ((this._poup != value))
				{
					this.OnpoupChanging(value);
					this.SendPropertyChanging();
					this._poup = value;
					this.SendPropertyChanged("poup");
					this.OnpoupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_boss", DbType="Int NOT NULL")]
		public int id_boss
		{
			get
			{
				return this._id_boss;
			}
			set
			{
				if ((this._id_boss != value))
				{
					this.Onid_bossChanging(value);
					this.SendPropertyChanging();
					this._id_boss = value;
					this.SendPropertyChanged("id_boss");
					this.Onid_bossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_glbuh", DbType="Int NOT NULL")]
		public int id_glbuh
		{
			get
			{
				return this._id_glbuh;
			}
			set
			{
				if ((this._id_glbuh != value))
				{
					this.Onid_glbuhChanging(value);
					this.SendPropertyChanging();
					this._id_glbuh = value;
					this.SendPropertyChanged("id_glbuh");
					this.Onid_glbuhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
