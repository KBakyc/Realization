using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DataObjects.Helpers;
using DataObjects.SeachDatas;
using System.Xml.Linq;
using DataObjects.ESFN;

namespace DataObjects.Interfaces
{
    public interface IDbService
    {
        //System.Windows.Threading.Dispatcher UIDispatcher { get; }
        event EventHandler<DataObjects.Events.ErrorEventArgs> OnError;
        bool IsSilent { get; set; }
        string ConnectionString { get; }
        UserInfo GetUserInfo(int _id);
        UserInfo GetUserInfo(string _login);
        UserInfo[] GetAllUserInfos();
        UserInfoExt GetUserInfoExt(int _userid);
        bool UpdateUserInfo(int _id, UserInfo _userInfo);
        bool CheckOnlineStatus();
        Dictionary<string, int> UserComponentsAcl { get; }
        int GetComponentAccess(string _cname);
        Valuta[] GetValutes();
        PkodModel[] GetPkods(int _poup);
        PkodModel GetPkod(int _poup, short _pkod);
        Valuta GetValutaByKod(string _kod);
        OtgrLine[] GetTempOtgr();
        void AcceptP623(OtgrLine[] _chRows);
        int UserToken { get; }
        KontrAgent GetKontrAgent(int kgr);
        KontrAgent GetSfResourceOwner(int _idsf);
        KontrAgent[] GetKontrAgentsByCodePat(int _kgrpat);
        KontrAgent[] GetKontrAgentsByNamePat(string _namepat);
        KontrAgent[] GetDavsByPoup(int _poup);
        KontrAgent[] GetKontragentsByRwStation(int _station);
        ProductInfo GetProductInfo(int kpr);
        ProductInfo[] GetProductsByPat(string _namepat);
        Dictionary<int, PoupModel> Poups { get; }
        void MakeTempP623(int _poup, short _pkod, DateTime _dateFrom, DateTime _dateTo);
        OtgrLine[] GetOtgrArc(int _idsf);
        OtgrLine[] GetOtgrArc(OtgruzSearchData _schData);
        OtgrLine GetOtgrLine(long _id, bool _inRealiz);
        SfModel[] MakeTempP635(int _poup, short _pkod, DateTime _dateFrom, DateTime _dateTo, int _userid, byte _dtaccmode, bool _oldnumsf, DateTime? _datesf);
        int[] AcceptSfs(int[] _idssf);
        void DeleteUnacceptedSfs();
        SfModel[] SelectUnacceptedSfs();
        bool DeleteSf(int _idsf);
        bool PurgeSf(int _idsf);
        SfModel GetSfModel(int _idsf);
        SfPayPeriodModel GetSfPeriod(int _idsf);
        SfPayPeriodModel GetActualSfPeriod(int _idsf);
        SfProductModel GetSfProduct(int _idprilsf);
        SfProductModel[] GetSfProducts(int _idSf);
        string GetShortTransportName(short _trId);
        BankInfo GetBankInfo(int _iddog, int _kontra);
        RailStation GetRailStation(int _kodst);
        DogInfo[] GetDogInfos(int _idARM);
        DogInfo GetDogInfo(int _id, bool _iskdog);
        DogInfo[] GetSfDopDogInfos(int _idsf);
        string GetPackageVolume(int _idspackage);
        PredoplModel[] GetPredopsFromFinance(int _poup, int _kpok, int _ndok, DateTime _datvvod, string _kodval, byte _dir);
        void GetPredoplFromBank(DateTime _dateFrom, DateTime _dateTo, string _valb, string _valp, int _poup, short[] _pkods, int _idbank);
        BankInfo[] GetBanksFromSchet(int _poup, short[] _pkod, string _kodval);
        Dictionary<PredoplModel, AcceptableInfo> GetTmpPredopls();
        void SaveAndAcceptTmpPredopls(Dictionary<PredoplModel, AcceptableInfo> _chRows);
        void AcceptTmpPredopls();
        int OurKgr { get; }
        int OurKodStan { get; }
        KaTotalDebt[] GetTotalDebts(string _kodval, int _poup, short _pkod, DateTime _datzakr);
        IEnumerable<SfInListInfo> GetKaOutstandingSfs(int _kpok, string _kodval, int _poup, short _pkod, DateTime _datzakr);
        SfInListInfo[] GetKaSfDebtsInPeriod(int _kpok, int _poup, short[] _pkods, DateTime _date1, DateTime _date2);
        ValOst[] GetSfsNeoplOstOnDate(int _kpok, int _poup, short[] _pkods, DateTime _ondate);
        PredoplModel[] GetPredoplsForClose(int _kpok, string _kodval, int _poup, DateTime _datzakr, short _pkod);
        ValOst[] GetPredoplOstOnDate(int _kpok, int _poup, short _pkod, DateTime _ondate);
        PredoplModel[] GetPredopls(PredoplSearchData _schData);
        PredoplModel[] GetPredoplsByKpok(int _kpok, int _poup, short[] _pkods, DateTime _date1, DateTime _date2);
        PredoplModel[] GetPredoplsByPaydoc(int _idpaydoc, PayDocTypes _paydoctype);
        string GetPredoplOsn(int _pid);
        SfTableLine[] GetSfLine(int _idprilsf);
        LifetimeStatuses GetSfStatus(int _idsf);
        bool SfPayByPredopl(int _idpo, int _idprilsf, byte _paygroup, byte _paytype, DateTime _dz, decimal _sumopl);
        SfModel SfHeaderUpdate(SfModel _sf, out bool isSuccess);
        SfProductPayModel SfProductPayUpdate(SfProductPayModel _pay, out bool isSuccess);
        SfPayPeriodModel SfPeriodUpdate(SfPayPeriodModel _sfp, out bool isSuccess);
        SfPayPeriodModel SfPeriodInsert(SfPayPeriodModel _sfp, out bool isSuccess);
        PredoplModel PredoplInsert(PredoplModel _pr, int _iStatus, out bool _result);
        PredoplModel PredoplUpdate(PredoplModel _pr, out bool isSuccess);
        SfModel[] GetSfsPayedByPredopl(int _idpo);
        PredoplModel[] GetPredoplVozvrats(int _idpo);
        PredoplModel[] GetPredoplsPayedByVozvrat(int _idvozv);
        bool DoPredoplVozvrat(int _idpo, int _idvozv, DateTime _datzakr);
        decimal GetSfSumOpl(int _idsf);
        IEnumerable<SfInListInfo> GetSfsList(SfSearchData _schData);
        SfInListInfo GetSfInListInfo(int _idsf);
        ReportModel[] GetReports(string _component);
        ReportModel GetSfPrintForm(int _idsf);
        ReportModel[] GetSfReports(int _idsf);
        SfInListInfo[] GetSfsByOtgruz(long _idp623);
        string GetTunedPayName(int _idprilsf, int _paytype);
        SfProductPayModel[] GetSfLinePays(int _idprilsf);
        SfProductPayModel[] GetSfPays(int _idsf);
        PDogInfoModel[] GetPDogInfosByKaPoup(int _kodka, int _poup, short _gpos); //, int _kamode);
        PDogInfoModel GetPDogInfoByKdog(int _kdog);
        OtgrDocModel[] GetOtgrDocsForCorrSf(int _kdog, DateTime _date1, DateTime _date2);
        OtgrDocModel[] GetOtgrDocsForBonusSf(int _oldiddog, int _newiddog, DateTime _date1, DateTime _date2);
        OtgrDocModel[] GetOtgrDocsForCorrSfSperByPerech(int _numrwlist, int _year, int _poup);
        ProductInfo[] GetProductsByOtgrDoc(string _documentNumber, int _idInvoiceType, DateTime _datgr, int _kdog);
        SfModel[] MakeCorrSfSper(IEnumerable<OtgrDocModel> _docs, int _poup, DateTime _datpltr, bool _oldsf);
        SfModel[] MakeCorrSf(IEnumerable<OtgrDocModel> _docs, int _kdog, int _poup, DateTime _datpltr, decimal _newcena, bool _oldsf);
        SfModel[] MakeBonusSf(IEnumerable<OtgrDocModel> _docs, DateTime _datpltr, bool _oldsf);
        decimal GetKursVal(DateTime _date, string _kodval);
        KodfModel[] GetKodfs();
        KodfModel GetKodf(int _kodf);
        SfPayOst[] GetSfPrilPaysOsts(int _idprilsf);
        SfPayTypeModel GetPayTypeModel(short _ptype);
        bool DeletePredopl(int _idpo);
        PredoplModel GetPredoplById(int _idpo);
        SfStatusInfo GetSfStatusLastDateTime(int _idsf, LifetimeStatuses _status);
        AgreementModel GetAgreementById(int _idAgree);
        AgreementModel[] GetKpokAgreements(int _kpok);
        SfProductPayModel GetProductPayById(long _idpay);
        string GetPayGroupName(short _id);
        HistoryInfo[] GetSfHistory(int _idsf);
        HistoryInfo[] GetOtgrHistory(long _idp623);
        HistoryInfo[] GetPredoplHistory(long _idpo);
        DateRange GetSfDateGrRange(int _idsf);
        JournalTypeModel[] GetJournalTypes(JournalKind _jkind);
        void MakeSalesJournal(string _vid, DateTime _dFrom, DateTime _dto, bool _isinterval, byte _podvid, bool _isperev, DateTime _perevFrom, DateTime _perevTo, bool _iswcorrsfs, string _jfname);
        bool IfSalesJournalExists(string _jFileName);
        void MakeF744(DateTime _toDate);
        void MakeFDebCred(int[] _poups, short[] _pkods, DateTime _onDate, DebtTypes _debcred, bool _isupload);
        void SetSfCurPayStatus(int _idsf, PayActions _actId, DateTime _adt);
        void SetPredolpStatus(int _idpo, PredoplStatuses _newstatus, DateTime _adt);
        decimal ConvertSumToVal(decimal _sum, string _fromkod, string _tokod, DateTime? _ondate, decimal? _kursfrom, decimal? _kursto);
        Dictionary<string, object> GetPayDocInfo(int _idregdoc, bool _bypostes = false);
        PayAction[] GetPayActions(int _idpo, int _idsf);
        bool UndoPayAction(PayAction _pa, DateTime _at);
        PredoplSchetModel[] GetPredoplSchets();
        void SavePredoplSchets(IEnumerable<PredoplSchetModel> _schets);
        BankInfo[] GetBankGroups();
        Vidcen[] GetVidcens();
        Dictionary<NdsTypes, decimal> GetNdsRatesOnDate(DateTime _ondate);
        decimal GetNDSByTypeOnDate(NdsTypes _nt, DateTime _ondate);
        Prodcen GetCena(int _kpr, int _vidcen, int _idspack, DateTime _ondate);
        bool AddOtgruz(OtgrLine _ol, string _logDescr);
        bool UpdateOtgruz(OtgrLine _ol, string _logDescr);
        bool UpdateOtgrOnSliv(long _idrnn, DateTime _datgr, decimal _kolf, DateTime _datdrain);
        bool UpdateOtgrByRwList(int _idRwList, int _numRwList, OtgrLine _otgr);
        bool DeleteOtgruz(OtgrLine _ol);
        Transport GetTransport(short _kodf, int _poup);
        Country[] GetCountries(int _kstr);
        Tuple<DateTime, decimal, int>[] GetKurses(string _kodval, DateTime _ondate);
        bool SfKroInfoUpdate(int _idsf, DateTime? _krodate);
        DateTime? GetSfKroInfo(int _idsf);
        SfModel[] GetOldSfs(int _idsf);
        Dictionary<OtgrLine, decimal> GetOtgrByAktSliv(string _nakt, DateTime _dakt);
        PenaltyModel[] GetPenaltyList(int _poup, DateTime _dateFrom, DateTime _dateTo);
        PenaltyModel GetPenaltyById(int _id);
        bool UpdatePenalty(PenaltyModel _pm);
        PenaltyModel InsertPenalty(PenaltyModel _pm);
        bool DeletePenalty(int _id);
        bool PenaltyPayByPredopl(int _idpo, int _idpen, DateTime _dz, decimal _sumopl);
        PenaltyModel[] GetKaOutstandingPens(int _kpok, string _kodval, int _poup, DateTime _datzakr);
        void PenaltyUndoPays(int _idpen);
        OtgrLine[] GetOtgrFromXChange(DateTime _dfrom, DateTime _dto, InOtgrTypes _ot);
        bool SaveNaprSettings(Dictionary<int, int[]> _sett);
        Dictionary<int, int[]> LoadNaprSettings();
        bool GetIfOtgrCanBeEdited(long _idp623);
        OtgrLine[] GetRwListData(int _rwlistnum, int _year);
        VidAkcModel[] GetVidAkcs();
        VidAkcModel GetVidAkc(int _id);
        WeightInfo GetSfWeightInfo(int _idsf);
        SignsInfo GetSigns(int _poup);
        SignatureInfo[] GetSigners(int _poup);
        void UpdateSigns(int _poup, int _boss, int _glbuh);
        int[] GetSignerPoups(int _idsigner);
        void SetSignerPoups(int _idsigner, params int[] _poups);
        void DeleteSigner(int _idsigner);
        int MergeSigner(SignatureInfo _signer);
        Dictionary<byte, string> GetSignTypes();
        KeyValueObj<string, decimal> GetAkcStake(int _kpr, DateTime _date);
        bool DoOtgrVozvrat(OtgrLine _otgr, OtgrLine _vozv);
        bool UnDoOtgrVozvrat(OtgrLine _vozv);
        VagonInfo GetVagonInfo(int _nv);
        Dictionary<byte, string> GetBuhSchetRecTypes();
        MeasureUnit[] GetMeasureUnits(int? _id);
        SfTypeInfo GetSfTypeInfo(short _sfTypeId);
        DateTime GetLastOplDate(DateTime _firstDate, int _srok, short _respiteType);
        OtgrDocModel[] GetSfPrilDocs(int _idprilsf);
        TypePlatDoc[] GetTypePlatDocs();
        Dictionary<byte, string> GetJournalUnionRecTypes();
        void SaveSaleJournalTypes(IEnumerable<JournalTypeModel> _jrns);
        Dictionary<DateTime, bool> GetDates(DateTime? _dtfrom, DateTime? _dto);
        bool SetDateInfo(DateTime _dt, bool _isholyday);
        bool SetReportFavorite(ReportModel _rep);
        InvoiceType GetInvoiceType(int _idInvoiceType);
        InvoiceType[] GetInvoiceTypes();
        EsfnData[] Make_ESFN(int _idsf);
        bool Approve_ESFN(int _idsf, bool _onoff);
        bool Delete_ESFN(int _idsf);
        EsfnData[] Get_ESFN(int _idsf);
        Tuple<InvoiceStatuses, string, string> Get_ESFN_Status(int _vatinvoiceid);
        Tuple<int, string, DateTime?, string, string, decimal?, string>[] Get_Income_ESFN(int _idsf);
        bool Set_Income_ESFN(int _idsf, int? _invoiceId);
        SfModel[] Get_Primary_Sfs(int _idsf);
        bool Set_Primary_ESFN(int _idsf, int _primaryIdsf);
        Tuple<int, string, DateTime?, string, string, decimal?, string>[] Get_ESFNs_ToLink(int _idsf);
        bool Set_ESFN_Link(int _idsf, int? _idsfprim, int? _invoiceId);
    }    
}
